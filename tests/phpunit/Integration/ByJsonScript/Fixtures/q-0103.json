{
	"description": "Test `_txt` for `~*` regex query with the condition to include the `\\` escape character (skip sqlite, postgres)",
	"properties": [
		{
			"name": "Has regexblob property",
			"contents": "[[Has type::Text]]"
		},
		{
			"name": "Has simple text",
			"contents": "[[Has type::Text]]"
		}
	],
	"subjects": [
		{
			"name": "Escape character blob subject-a",
			"contents": "{{#set:|Has regexblob property=[(+*. \\.)']}} {{#subobject:FixedSubobjectName|Has regexblob property=[(+* \\:)]\\\\\"}}"
		},
		{
			"name": "Escape character blob subject-b",
			"contents": "{{#set:|Has regexblob property=[(+*. \\;)\\\\']\\\"}} {{#subobject:FixedSubobjectName|Has regexblob property=[(+* \\=)]\\\\\"\\\"}}"
		},
		{
			"name": "Escape character blob subject-c",
			"contents": "[[Has regexblob property::Foo(\\\"'#^$&-/)]]"
		},
		{
			"name": "BlobValue with whitespaces",
			"contents": "[[Has simple text:: +/-nuclear atypia ]]"
		}
	],
	"query-testcases": [
		{
			"about": "#0",
			"condition": "[[Has regexblob property::~*.*]]",
			"printouts" : [],
			"parameters" : {
			  "limit" : "10"
			},
			"queryresult": {
				"results": [
					"Escape character blob subject-a#0##",
					"Escape character blob subject-b#0##"
				],
				"count": "2"
			}
		},
		{
			"about": "#1",
			"condition": "[[Has regexblob property::~*\\'*]]",
			"printouts" : [],
			"parameters" : {
			  "limit" : "10"
			},
			"queryresult": {
				"results": [
					"Escape character blob subject-b#0##"
				],
				"count": "1"
			}
		},
		{
			"about": "#2",
			"condition": "[[Has regexblob property::~*'*]]",
			"printouts" : [],
			"parameters" : {
			  "limit" : "10"
			},
			"queryresult": {
				"results": [
					"Escape character blob subject-b#0##",
					"Escape character blob subject-a#0##",
					"Escape character blob subject-c#0##"
				],
				"count": "3"
			}
		},
		{
			"about": "#3",
			"condition": "[[Has regexblob property::~*\\\\'*]]",
			"printouts" : [],
			"parameters" : {
			  "limit" : "10"
			},
			"queryresult": {
				"results": [
					"Escape character blob subject-b#0##"
				],
				"count": "1"
			}
		},
		{
			"about": "#4",
			"condition": "[[Has regexblob property::~*\\\\\"*]]",
			"printouts" : [ "Has regexblob property" ],
			"parameters" : {
			  "limit" : "10"
			},
			"queryresult": {
				"results": [
					"Escape character blob subject-a#0##FixedSubobjectName",
					"Escape character blob subject-b#0##FixedSubobjectName"
				],
				"count": "2"
			}
		},
		{
			"about": "#5",
			"condition": "[[Has regexblob property::~*\\\\\"\\\"*]]",
			"printouts" : [ "Has regexblob property" ],
			"parameters" : {
			  "limit" : "10"
			},
			"queryresult": {
				"results": [
					"Escape character blob subject-b#0##FixedSubobjectName"
				],
				"count": "1"
			}
		},
		{
			"about": "#6",
			"condition": "[[Has regexblob property::~*\\\"*]]",
			"printouts" : [ "Has regexblob property" ],
			"parameters" : {
			  "limit" : "10"
			},
			"queryresult": {
				"results": [
					"Escape character blob subject-a#0##FixedSubobjectName",
					"Escape character blob subject-b#0##",
					"Escape character blob subject-b#0##FixedSubobjectName",
					"Escape character blob subject-c#0##"
				],
				"count": "4"
			}
		},
		{
			"about": "#7",
			"condition": "[[Has regexblob property::~*\\.*]]",
			"printouts" : [],
			"parameters" : {
			 "limit" : "10"
			},
			"queryresult": {
				"results": [
					"Escape character blob subject-a#0##"
				],
				"count": "1"
			}
		},
		{
			"about": "#8",
			"condition": "[[Has regexblob property::~*\\:*]]",
			"printouts" : [],
			"parameters" : {
			  "limit" : "10"
			},
			"queryresult": {
				"results": [
					"Escape character blob subject-a#0##FixedSubobjectName"
				],
				"count": "1"
			}
		},
		{
			"about": "#9",
			"condition": "[[Has regexblob property::~*Foo(\\\"'#^$&-/)*]]",
			"printouts" : [],
			"parameters" : {
			  "limit" : "10"
			},
			"queryresult": {
				"results": [
					"Escape character blob subject-c#0##"
				],
				"count": "1"
			}
		},
		{
			"about": "#10 find subject even when value annotation contained whitespaces",
			"condition": "[[Has simple text::+/-nuclear atypia]]",
			"printouts" : [],
			"parameters" : {
			  "limit" : "10"
			},
			"queryresult": {
				"results": [
					"BlobValue with whitespaces#0##"
				],
				"count": "1"
			}
		}
	],
	"settings": {},
	"meta": {
		"skip-on": {
			"sqlite": "Requires special \\ escape sequence on sqlite"
		},
		"version": "0.1",
		"is-incomplete": false,
		"debug": false
	}
}